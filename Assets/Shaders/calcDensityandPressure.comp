#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 1) buffer HashLookupTable {
    int hashLookupTable[];
};

layout(local_size_x = 704) in;

layout(location = 0) uniform float gridSize;
layout(location = 1) uniform int hashfunctionX;
layout(location = 2) uniform int hashfunctionY;
layout(location = 3) uniform int hashfunctionZ;
layout(location = 4) uniform float mass;
layout(location = 5) uniform float smoothingKernelMultiplier;
layout(location = 6) uniform float idealDensity;
layout(location = 7) uniform float pressureMultipler;

uint calcHash(ivec3 gridpos) {
    return (uint((gridpos.x * hashfunctionX) ^ (gridpos.y * hashfunctionY) ^ (gridpos.z * hashfunctionZ)) % particles.length());
}

uint spreadBits(uint v) {
    v = (v | (v << 16)) & 0x030000FF;
    v = (v | (v << 8)) & 0x0300F00F;
    v = (v | (v << 4)) & 0x030C30C3;
    v = (v | (v << 2)) & 0x09249249;
    return v;
}

uint zOrder(vec3 v) {
    uint x = uint(v.x) % 128;
    uint y = uint(v.y) % 128;
    uint z = uint(v.z) % 128;
    return spreadBits(x) | (spreadBits(y) << 1) | (spreadBits(z) << 2);
}

float smoothingKernel(float h, float r) {
    return smoothingKernelMultiplier * pow(((h - r)/10), 2) * step(r, h);
}

float convertDensityToPressure(float density) {
    return (density - idealDensity) * pressureMultipler;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    Particle p = particles[index];

    ivec3 gridpos = ivec3(p.PredictedPosition / gridSize);

    float density = 0.0;

    // Precompute the hashes for the neighboring cells
    uint neighborHashes[27];
    int count = 0;
    for (int ix = -1; ix <= 1; ix++) {
        for (int iy = -1; iy <= 1; iy++) {
            for (int iz = -1; iz <= 1; iz++) {
                ivec3 neighborGridPos = gridpos + ivec3(ix, iy, iz);
                //neighborHashes[count++] = calcHash(neighborGridPos);
                neighborHashes[count++] = zOrder(neighborGridPos) % hashLookupTable.length();;

            }
        }
    }

    // Loop through precomputed hashes and particles
    for (int i = 0; i < 27; i++) {
        uint key = neighborHashes[i];
        int startIndex = hashLookupTable[key];
        float mask = 1;
        for (int j = startIndex; j < particles.length() && mask != 0; j++) {
            Particle neighbor = particles[j];
            mask = float(key == neighbor.Gridhash);
            float distance = length(neighbor.PredictedPosition - p.PredictedPosition);
            float influence = smoothingKernel(gridSize, distance);
            density += mass * influence * mask;
        }
    }

    particles[index].density = density;
    particles[index].pressure = convertDensityToPressure(density);
}
