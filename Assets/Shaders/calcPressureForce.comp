#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 1) buffer HashLookupTable {
    int hashLookupTable[];
};

layout(local_size_x = 704) in;

layout(location = 0) uniform float gridSize;
layout(location = 1) uniform int hashfunctionX;
layout(location = 2) uniform int hashfunctionY;
layout(location = 3) uniform int hashfunctionZ;
layout(location = 4) uniform float mass;
layout(location = 5) uniform float smoothingKernelDerivativeMultiplier;
layout(location = 6) uniform float viscosityMultiplier;

uint calcHash(ivec3 gridpos){
    return (uint((gridpos.x * hashfunctionX) + (gridpos.y * hashfunctionY) + (gridpos.z * hashfunctionZ)) % particles.length());
}

float smoothingKernelDerivative(float h, float r) {
    if(r > h) return 0.0;
    return smoothingKernelDerivativeMultiplier * ((r - h) / 100.0f);
}


void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    Particle p = particles[index];
    ivec3 gridpos = ivec3(p.PredictedPosition / gridSize);

    vec3 pressureForce = vec3(0.0);

    // Precompute the hashes for the neighboring cells
    uint neighborHashes[27];
    int count = 0;
    for (int ix = -1; ix <= 1; ix++) {
        for (int iy = -1; iy <= 1; iy++) {
            for (int iz = -1; iz <= 1; iz++) {
                ivec3 neighborGridPos = gridpos + ivec3(ix, iy, iz);
                neighborHashes[count++] = calcHash(neighborGridPos);
            }
        }
    }

    // Loop through precomputed hashes and particles
    for (int i = 0; i < 27; i++) {
        uint key = neighborHashes[i];
        int startIndex = hashLookupTable[key];
        for (int j = startIndex; j < particles.length(); j++) {
            Particle neighbor = particles[j];
            if (key != neighbor.Gridhash) break;
            if (index == j) continue;

            vec3 offsetVec = neighbor.PredictedPosition - p.PredictedPosition;
            float distance = length(offsetVec);

            if (distance > gridSize) continue;

            vec3 dir = distance == 0.0 ? normalize(neighbor.Position - particles[j-1].Position) : offsetVec / distance;

            float kernelDerivative = smoothingKernelDerivative(gridSize, distance);
            float neighborDensity = neighbor.density;
            float sharedPressure = (neighbor.pressure + p.pressure) / 2.0;
            pressureForce += dir * (sharedPressure * kernelDerivative * mass / neighborDensity);

            // Add viscosity
            vec3 velocityDiff = neighbor.Velocity - p.Velocity;
            pressureForce += velocityDiff * viscosityMultiplier * (-kernelDerivative / (neighborDensity * 100.0));
        }
    }

    particles[index].PressureAcceleration = pressureForce / mass;
}
