#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

struct Fence {
    int left;
    int right;
    int bottom;
    int top;
    int front;
    int back;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 1) buffer HashLookupTable {
    int hashLookupTable[];
};

layout(std430, binding = 2) buffer NeighbourParticlesBuffer {
    int NeighbourParticles[];
};

layout(std430, binding = 7) buffer maxYBuffer{
    int maxY;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(location = 0) uniform float gridSize;
layout(location = 1) uniform int hashFunctionX;
layout(location = 2) uniform int hashFunctionY;
layout(location = 3) uniform int hashFunctionZ;
layout(location = 4) uniform float marchingCubeGridSize;
layout(location = 5) uniform Fence fence;
layout(location = 11) uniform ivec3 gridSizeVec;


uint calcHash(ivec3 gridpos) {
    return (uint((gridpos.x * hashFunctionX) ^ (gridpos.y * hashFunctionY) ^ (gridpos.z * hashFunctionZ)) % particles.length());
}

uint spreadBits(uint v) {
    v = (v | (v << 16)) & 0x030000FF;
    v = (v | (v << 8)) & 0x0300F00F;
    v = (v | (v << 4)) & 0x030C30C3;
    v = (v | (v << 2)) & 0x09249249;
    return v;
}

uint zOrder(vec3 v) {
    uint x = uint(v.x) % 128;
    uint y = uint(v.y) % 128;
    uint z = uint(v.z) % 128;
    return spreadBits(x) | (spreadBits(y) << 1) | (spreadBits(z) << 2);
}

void main() {
    ivec3 index = ivec3(gl_GlobalInvocationID.xyz);
   
    // Update bounds checking to account for the expanded grid
    if (index.x >= gridSizeVec.x || index.y >= gridSizeVec.y || index.z >= gridSizeVec.z)
        return;

    vec3 least = vec3(fence.left, fence.bottom, fence.front);
    vec3 most = vec3(fence.right, fence.top, fence.back);
    // Adjust position calculation to start one grid before
    ivec3 pos = ivec3(least + vec3(index - ivec3(1)) * marchingCubeGridSize);

    int dIndex = int(index.x * gridSizeVec.y * gridSizeVec.z + index.y * gridSizeVec.z + index.z);

    if(pos.y > maxY + gridSize){
        NeighbourParticles[dIndex] = 0;
        return;
    }

    ivec3 gridPos = ivec3(pos / gridSize);

    // Precompute the hashes for the neighboring cells
    uint neighborHashes[27];
    int count = 0;
    for (int ix = -1; ix <= 1; ix++) {
        for (int iy = -1; iy <= 1; iy++) {
            for (int iz = -1; iz <= 1; iz++) {
                //neighborHashes[count++] = calcHash(gridPos + ivec3(ix, iy, iz));
                neighborHashes[count++] = zOrder(gridPos + ivec3(ix, iy, iz)) % hashLookupTable.length();;

            }
        }
    }

    int neighborCount = 0; 

    // Loop through precomputed hashes and particles
    for (int i = 0; i < 27; i++) {
        uint key = neighborHashes[i];
        int startIndex = hashLookupTable[key];
        for (int j = startIndex; j < particles.length(); j++) {
            Particle neighbor = particles[j];
            if (key != neighbor.Gridhash) break;

            float distance = length(neighbor.Position - vec3(pos));
            if (distance <= gridSize) neighborCount++;
        }
    }

    NeighbourParticles[dIndex] = neighborCount;
}
