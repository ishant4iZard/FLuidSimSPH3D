#version 430

layout(std430, binding = 2) buffer NeighbourParticlesBuffer {
    int NeighbourParticles[];
};

layout(std430, binding = 3) buffer TriangleBuffer {
    vec4 triangles[]; // Store triangle vertices, each as vec4 (position.xyz and normal)
};

layout(std430, binding = 4) buffer CounterBuffer {
    uint triangleCounter;
};

layout(std430, binding = 5) buffer EdgeTableBuffer {
    int edgeTable[256];
};

layout(std430, binding = 6) buffer TriTableBuffer {
    int triTable[256][16];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(location = 0) uniform float isolevel; // The isosurface level
layout(location = 1) uniform float gridSize;
layout(location = 2) uniform int gridWidth;
layout(location = 3) uniform int gridHeight;
layout(location = 4) uniform int gridDepth;

vec4 vertexInterp(float isolevel, vec4 p1, vec4 p2, float valp1, float valp2) {
    float mu;
    vec4 p;

    if (abs(isolevel - valp1) < 0.00001) return p1;
    if (abs(isolevel - valp2) < 0.00001) return p2;
    if (abs(valp1 - valp2) < 0.00001) return p1;
    
    mu = (isolevel - valp1) / (valp2 - valp1);
    p = p1 + mu * (p2 - p1);

    return p;
}

float getValue(ivec3 pos){
    return NeighbourParticles[pos.x * gridHeight * gridDepth + pos.y * gridDepth + pos.z];
}

vec4 getPosition(ivec3 pos){
    return vec4(pos - ivec3(1) * gridSize,1.0f);
}


void main() {
    ivec3 index = ivec3(gl_GlobalInvocationID.xyz);

    if (index.x >= gridWidth || index.y >= gridHeight-1 || index.z >= gridDepth)
        return;

    int cubeIndex = 0;
    float values[8];
    vec4 positions[8];
    
    // Read scalar values at cube corners
    values[0] = getValue(index);
    values[1] = getValue(index + ivec3(1, 0, 0));
    values[2] = getValue(index + ivec3(1, 1, 0));
    values[3] = getValue(index + ivec3(0, 1, 0));
    values[4] = getValue(index + ivec3(0, 0, 1));
    values[5] = getValue(index + ivec3(1, 0, 1));
    values[6] = getValue(index + ivec3(1, 1, 1));
    values[7] = getValue(index + ivec3(0, 1, 1));

    positions[0] = getPosition(index);
    positions[1] = getPosition(index + ivec3(1, 0, 0));
    positions[2] = getPosition(index + ivec3(1, 1, 0));
    positions[3] = getPosition(index + ivec3(0, 1, 0));
    positions[4] = getPosition(index + ivec3(0, 0, 1));
    positions[5] = getPosition(index + ivec3(1, 0, 1));
    positions[6] = getPosition(index + ivec3(1, 1, 1));
    positions[7] = getPosition(index + ivec3(0, 1, 1));

    // Determine the cube index based on the isolevel
    for (int i = 0; i < 8; ++i) {
        if (values[i] < isolevel) cubeIndex |= (1 << i);
    }
    
    // Use the edge table to find the active edges
    int edges = edgeTable[cubeIndex];
    if (edges == 0) return; // No active edges, no triangles
    
    // Compute the vertices on the active edges
    vec4 vertList[12];
    if ((edges & 1) != 0){
//        vertList[0] = mix(  vec3(index) * gridSize, 
//                            vec3(index + ivec3(1, 0, 0)) * gridSize, 
//                            (isolevel - values[0]) / (values[1] - values[0]));
        vertList[0] = vertexInterp(isolevel, positions[0], positions[1], values[0], values[1]);
    }
    if ((edges & 2) != 0) {
//        vertList[1] = mix(  vec3(index + ivec3(1, 0, 0)) * gridSize, 
//                            vec3(index + ivec3(1, 1, 0)) * gridSize, 
//                            (isolevel - values[1]) / (values[2] - values[1]));
        vertList[1] = vertexInterp(isolevel, positions[1], positions[2], values[1], values[2]);
    }
    if ((edges & 4) != 0) {
//        vertList[2] = mix(  vec3(index + ivec3(1, 1, 0)) * gridSize, 
//                            vec3(index + ivec3(0, 1, 0)) * gridSize, 
//                            (isolevel - values[2]) / (values[3] - values[2]));
        vertList[2] = vertexInterp(isolevel, positions[2], positions[3], values[2], values[3]);
    }
    if ((edges & 8) != 0){ 
//        vertList[3] = mix(  vec3(index + ivec3(0, 1, 0)) * gridSize, 
//                            vec3(index) * gridSize, 
//                            (isolevel - values[3]) / (values[0] - values[3]));
        vertList[3] = vertexInterp(isolevel, positions[3], positions[0], values[3], values[0]);
    }
    if ((edges & 16) != 0){
//        vertList[4] = mix(  vec3(index) * gridSize, 
//                            vec3(index + ivec3(0, 0, 1)) * gridSize, 
//                            (isolevel - values[0]) / (values[4] - values[0]));
        vertList[4] = vertexInterp(isolevel, positions[4], positions[5], values[4], values[5]);
}
    if ((edges & 32) != 0){
//        vertList[5] = mix(  vec3(index + ivec3(1, 0, 0)) * gridSize, 
//                            vec3(index + ivec3(1, 0, 1)) * gridSize, 
//                            (isolevel - values[1]) / (values[5] - values[1]));
        vertList[5] = vertexInterp(isolevel, positions[5], positions[6], values[5], values[6]);
    }
    if ((edges & 64) != 0) {
//        vertList[6] = mix(  vec3(index + ivec3(1, 1, 0)) * gridSize, 
//                            vec3(index + ivec3(1, 1, 1)) * gridSize, 
//                            (isolevel - values[2]) / (values[6] - values[2]));
        vertList[6] = vertexInterp(isolevel, positions[6], positions[7], values[6], values[7]);
    }
    if ((edges & 128) != 0) {
//        vertList[7] = mix(  vec3(index + ivec3(0, 1, 0)) * gridSize, 
//                            vec3(index + ivec3(0, 1, 1)) * gridSize, 
//                            (isolevel - values[3]) / (values[7] - values[3]));
        vertList[7] = vertexInterp(isolevel, positions[7], positions[4], values[7], values[4]);
    }
    if ((edges & 256) != 0) {
//        vertList[8] = mix(  vec3(index + ivec3(0, 0, 1)) * gridSize, 
//                            vec3(index + ivec3(1, 0, 1)) * gridSize, 
//                            (isolevel - values[4]) / (values[5] - values[4]));
        vertList[8] = vertexInterp(isolevel, positions[0], positions[4], values[0], values[4]);
    }
    if ((edges & 512) != 0) {
//        vertList[9] = mix(  vec3(index + ivec3(1, 0, 1)) * gridSize, 
//                            vec3(index + ivec3(1, 1, 1)) * gridSize, 
//                            (isolevel - values[5]) / (values[6] - values[5]));
        vertList[9] = vertexInterp(isolevel, positions[1], positions[5], values[1], values[5]);
    }
    if ((edges & 1024) != 0) {
//        vertList[10] = mix( vec3(index + ivec3(1, 1, 1)) * gridSize, 
//                            vec3(index + ivec3(0, 1, 1)) * gridSize, 
//                            (isolevel - values[6]) / (values[7] - values[6]));
        vertList[10] = vertexInterp(isolevel, positions[2], positions[6], values[2], values[6]);
    }
    if ((edges & 2048) != 0) {
//        vertList[11] = mix( vec3(index + ivec3(0, 1, 1)) * gridSize, 
//                            vec3(index + ivec3(0, 0, 1)) * gridSize, 
//                            (isolevel - values[7]) / (values[4] - values[7]));
        vertList[11] = vertexInterp(isolevel, positions[3], positions[7], values[3], values[7]);

    }
    
    // Generate triangles from the vertex list
    for (int i = 0; triTable[cubeIndex][i] != -1; i += 3) {
        vec4 v0 = vertList[triTable[cubeIndex][i]];
        vec4 v1 = vertList[triTable[cubeIndex][i + 1]];
        vec4 v2 = vertList[triTable[cubeIndex][i + 2]];
        
        // Calculate the normal of the triangle
        vec3 normal = normalize(cross(v1.xyz - v0.xyz, v2.xyz - v0.xyz));
        
        // Store the triangle vertices and normals in the TriangleBuffer
        uint triangleIndex = atomicAdd(triangleCounter, 3);
        triangles[triangleIndex] = vec4(v0);
        triangles[triangleIndex + 1] =  vec4(v1);
        triangles[triangleIndex + 2] = vec4(v2);
    }
}
