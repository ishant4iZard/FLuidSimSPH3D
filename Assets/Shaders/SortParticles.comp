#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(location = 0) uniform int numParticles;
layout(location = 1) uniform int groupWidth;
layout(location = 2) uniform int groupHeight;
layout(location = 3) uniform int stepIndex;

layout(local_size_x = 1024) in;

void main() {
    uint i = gl_GlobalInvocationID.x;

    if(i>numParticles) return;

    uint hIndex = i & (groupWidth - 1);
    uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
    uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
    uint indexRight = indexLeft + rightStepSize;

    // Exit if out of bounds (for non-power of 2 input sizes)
    if (indexRight >= numParticles || indexLeft>=numParticles) return;

    uint valueLeft = particles[indexLeft].Gridhash;
    uint valueRight = particles[indexRight].Gridhash;

    // Swap entries if value is descending
    if (valueLeft > valueRight) {
        Particle temp = particles[indexLeft];
        particles[indexLeft] = particles[indexRight];
        particles[indexRight] = temp;
    }
}
