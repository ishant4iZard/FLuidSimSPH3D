#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(local_size_x = 704) in;

layout(location = 0) uniform float gridSize;
layout(location = 1) uniform int hashfunctionX;
layout(location = 2) uniform int hashfunctionY;
layout(location = 3) uniform int hashfunctionZ;
layout(location = 4) uniform int hashLookuptablesize;


uint calcHash(ivec3 gridpos) {
    return (uint((gridpos.x * hashfunctionX) ^ (gridpos.y * hashfunctionY) ^ (gridpos.z * hashfunctionZ)) % particles.length());
}

uint spreadBits(uint v) {
    v = (v | (v << 16)) & 0x030000FF;
    v = (v | (v << 8)) & 0x0300F00F;
    v = (v | (v << 4)) & 0x030C30C3;
    v = (v | (v << 2)) & 0x09249249;
    return v;
}

uint zOrder(vec3 v) {
    uint x = uint(v.x) % 64;
    uint y = uint(v.y) % 64;
    uint z = uint(v.z) % 64;
    return spreadBits(x) | (spreadBits(y) << 1) | (spreadBits(z) << 2);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    ivec3 gridpos = ivec3 (particles[index].PredictedPosition.xyz / gridSize);

    //particles[index].Gridhash = calcHash(gridpos);
    particles[index].Gridhash = zOrder(gridpos) % hashLookuptablesize;

}