#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(local_size_x = 1024) in;

layout(location = 0) uniform float gridSize;
layout(location = 1) uniform int hashfunctionX;
layout(location = 2) uniform int hashfunctionY;
layout(location = 3) uniform int hashfunctionZ;

uint calcHash(ivec3 gridpos){
    return (uint((gridpos.x * hashfunctionX) + (gridpos.y * hashfunctionY) + (gridpos.z * hashfunctionZ)) % particles.length());
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    ivec3 gridpos = ivec3 (particles[index].PredictedPosition.xyz / gridSize);

    particles[index].Gridhash = calcHash(gridpos);
}