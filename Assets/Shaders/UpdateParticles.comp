#version 430

struct Particle {
    vec3 Position;
    vec3 PredictedPosition;
    vec3 Velocity;
    vec3 PressureAcceleration;

    float density;
    float pressure;

    uint Gridhash;
};

struct Fence {
    int left;
    int right;
    int bottom;
    int top;
    int front;
    int back;
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

layout(local_size_x = 704) in;

layout(location = 0) uniform Fence fence;
layout(location = 6) uniform float dt;
layout(location = 7) uniform bool gravityEnabled;
layout(location = 8) uniform vec3 gravity;
layout(location = 9) uniform float particleRadius;
layout(location = 10) uniform float dampingRate;
layout(location = 11) uniform float smoothingRadius;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= particles.length()) return;

    Particle p = particles[index];

    vec3 velocity = p.Velocity + p.PressureAcceleration * dt;
    if (gravityEnabled) {
        velocity += gravity * dt;
    }

    vec3 position = p.Position + velocity * dt;

    float radiusOffset = 0.0001f + particleRadius + smoothingRadius;

    if (position.y >= fence.bottom - particleRadius - smoothingRadius) {
        position.y = fence.bottom - radiusOffset;
        velocity.y = -velocity.y * dampingRate;
    }
    if (position.y <= fence.top + particleRadius + smoothingRadius) {
        position.y = fence.top + radiusOffset;
        velocity.y = -velocity.y * dampingRate;
    }
    if (position.x >= fence.right - particleRadius -smoothingRadius) {
        position.x = fence.right - radiusOffset;
        velocity.x = -velocity.x * dampingRate;
    }
    if (position.x <= fence.left + particleRadius +smoothingRadius) {
        position.x = fence.left + radiusOffset;
        velocity.x = -velocity.x * dampingRate;
    }
    if (position.z >= fence.back - particleRadius -smoothingRadius) {
        position.z = fence.back - radiusOffset;
        velocity.z = -velocity.z * dampingRate;
    }
    if (position.z <= fence.front + particleRadius+smoothingRadius) {
        position.z = fence.front + radiusOffset;
        velocity.z = -velocity.z * dampingRate;
    }

    float predictionTimestep = 1 / 120.0f;

    vec3 predictedPosition = position + velocity * predictionTimestep + gravity * 0.5f * (predictionTimestep * predictionTimestep);

    particles[index].Velocity = velocity;
    particles[index].Position = position;

    particles[index].PredictedPosition.x = clamp(predictedPosition.x, float(fence.left +radiusOffset), float(fence.right-radiusOffset));
    particles[index].PredictedPosition.y = clamp(predictedPosition.y, float(fence.top+radiusOffset), float(fence.bottom-radiusOffset));
    particles[index].PredictedPosition.z = clamp(predictedPosition.z, float(fence.front+radiusOffset), float(fence.back-radiusOffset));
}
